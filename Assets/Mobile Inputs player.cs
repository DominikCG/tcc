//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Mobile Inputs player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MobileInputsplayer : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MobileInputsplayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mobile Inputs player"",
    ""maps"": [
        {
            ""name"": ""MovePlayer"",
            ""id"": ""908f6ed9-c3df-4b62-bf00-e5d9036e5277"",
            ""actions"": [
                {
                    ""name"": ""wasd"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c2dde96f-8874-401c-886c-069e445922c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PieceMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2bf652dd-d636-455e-a719-b4fd1245ce7e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62e41279-9f05-44da-bb16-c59ffae6672c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""3919282c-d169-43a2-8030-7e31704a6ea7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6574face-6719-42d4-96b5-1e410f67d7ab"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9e44289c-41cb-4f1e-812c-5bf6a3352831"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""78d2fce1-dfd9-4583-8d57-5fcf91b314ec"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2921eff3-08db-4aab-8156-69fb00acd18b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wasd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""85a7be4f-987c-4ea3-b799-6f342e57a35d"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Setas"",
                    ""id"": ""cbd01fbc-0f44-4e42-9a46-2d7191aac1d6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2843e040-8293-40a4-8f09-fba4f628d669"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04f5a7d1-0da9-4943-b3f6-9a29506443ec"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""059c8dd7-ae21-414a-9596-f03c850d7843"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6c470f56-465b-4bea-b4dc-790190ff3198"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MovePiece"",
            ""id"": ""e55d46ad-766c-4ff2-a3bd-a4664e13b335"",
            ""actions"": [
                {
                    ""name"": ""PieceMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b685d166-5eeb-4748-ac04-d73920d83c7f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""745bcf92-efb6-4acc-b6d9-484883e0a812"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Setas"",
                    ""id"": ""5a084b79-c118-448b-9a73-a65b14d11eb5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""faa121eb-a620-4bbc-b95b-19d23024d71e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""055e92b4-fca8-41ff-b1fd-2bc4776060f2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3fca1632-4375-4eb8-8adb-077213451016"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d5e120b6-062e-4ca5-ad33-dfc6daaf7c95"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PieceMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovePlayer
        m_MovePlayer = asset.FindActionMap("MovePlayer", throwIfNotFound: true);
        m_MovePlayer_wasd = m_MovePlayer.FindAction("wasd", throwIfNotFound: true);
        m_MovePlayer_PieceMove = m_MovePlayer.FindAction("PieceMove", throwIfNotFound: true);
        // MovePiece
        m_MovePiece = asset.FindActionMap("MovePiece", throwIfNotFound: true);
        m_MovePiece_PieceMove = m_MovePiece.FindAction("PieceMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovePlayer
    private readonly InputActionMap m_MovePlayer;
    private IMovePlayerActions m_MovePlayerActionsCallbackInterface;
    private readonly InputAction m_MovePlayer_wasd;
    private readonly InputAction m_MovePlayer_PieceMove;
    public struct MovePlayerActions
    {
        private @MobileInputsplayer m_Wrapper;
        public MovePlayerActions(@MobileInputsplayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @wasd => m_Wrapper.m_MovePlayer_wasd;
        public InputAction @PieceMove => m_Wrapper.m_MovePlayer_PieceMove;
        public InputActionMap Get() { return m_Wrapper.m_MovePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovePlayerActions set) { return set.Get(); }
        public void SetCallbacks(IMovePlayerActions instance)
        {
            if (m_Wrapper.m_MovePlayerActionsCallbackInterface != null)
            {
                @wasd.started -= m_Wrapper.m_MovePlayerActionsCallbackInterface.OnWasd;
                @wasd.performed -= m_Wrapper.m_MovePlayerActionsCallbackInterface.OnWasd;
                @wasd.canceled -= m_Wrapper.m_MovePlayerActionsCallbackInterface.OnWasd;
                @PieceMove.started -= m_Wrapper.m_MovePlayerActionsCallbackInterface.OnPieceMove;
                @PieceMove.performed -= m_Wrapper.m_MovePlayerActionsCallbackInterface.OnPieceMove;
                @PieceMove.canceled -= m_Wrapper.m_MovePlayerActionsCallbackInterface.OnPieceMove;
            }
            m_Wrapper.m_MovePlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @wasd.started += instance.OnWasd;
                @wasd.performed += instance.OnWasd;
                @wasd.canceled += instance.OnWasd;
                @PieceMove.started += instance.OnPieceMove;
                @PieceMove.performed += instance.OnPieceMove;
                @PieceMove.canceled += instance.OnPieceMove;
            }
        }
    }
    public MovePlayerActions @MovePlayer => new MovePlayerActions(this);

    // MovePiece
    private readonly InputActionMap m_MovePiece;
    private IMovePieceActions m_MovePieceActionsCallbackInterface;
    private readonly InputAction m_MovePiece_PieceMove;
    public struct MovePieceActions
    {
        private @MobileInputsplayer m_Wrapper;
        public MovePieceActions(@MobileInputsplayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @PieceMove => m_Wrapper.m_MovePiece_PieceMove;
        public InputActionMap Get() { return m_Wrapper.m_MovePiece; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovePieceActions set) { return set.Get(); }
        public void SetCallbacks(IMovePieceActions instance)
        {
            if (m_Wrapper.m_MovePieceActionsCallbackInterface != null)
            {
                @PieceMove.started -= m_Wrapper.m_MovePieceActionsCallbackInterface.OnPieceMove;
                @PieceMove.performed -= m_Wrapper.m_MovePieceActionsCallbackInterface.OnPieceMove;
                @PieceMove.canceled -= m_Wrapper.m_MovePieceActionsCallbackInterface.OnPieceMove;
            }
            m_Wrapper.m_MovePieceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PieceMove.started += instance.OnPieceMove;
                @PieceMove.performed += instance.OnPieceMove;
                @PieceMove.canceled += instance.OnPieceMove;
            }
        }
    }
    public MovePieceActions @MovePiece => new MovePieceActions(this);
    public interface IMovePlayerActions
    {
        void OnWasd(InputAction.CallbackContext context);
        void OnPieceMove(InputAction.CallbackContext context);
    }
    public interface IMovePieceActions
    {
        void OnPieceMove(InputAction.CallbackContext context);
    }
}
